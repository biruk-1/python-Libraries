#!/usr/bin/env python3
"""
Viral Clip Generation - Practice Environment
This script helps you test and practice with all the installed libraries
"""

import sys
import os
from pathlib import Path

def test_basic_imports():
    """Test basic library imports"""
    print("üîç Testing basic library imports...")
    
    try:
        import numpy as np
        print("‚úÖ NumPy imported successfully")
        
        import pandas as pd
        print("‚úÖ Pandas imported successfully")
        
        import matplotlib.pyplot as plt
        print("‚úÖ Matplotlib imported successfully")
        
        import scipy
        print("‚úÖ SciPy imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_audio_libraries():
    """Test audio processing libraries"""
    print("\nüéµ Testing audio processing libraries...")
    
    try:
        import librosa
        print("‚úÖ Librosa imported successfully")
        
        import soundfile as sf
        print("‚úÖ SoundFile imported successfully")
        
        import pydub
        print("‚úÖ PyDub imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Audio library import error: {e}")
        return False

def test_video_libraries():
    """Test video processing libraries"""
    print("\nüé¨ Testing video processing libraries...")
    
    try:
        import moviepy.editor as mp
        print("‚úÖ MoviePy imported successfully")
        
        import ffmpeg
        print("‚úÖ FFmpeg-Python imported successfully")
        
        from PIL import Image
        print("‚úÖ Pillow (PIL) imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Video library import error: {e}")
        return False

def test_ai_libraries():
    """Test AI and machine learning libraries"""
    print("\nü§ñ Testing AI and ML libraries...")
    
    try:
        import openai
        print("‚úÖ OpenAI imported successfully")
        
        import torch
        print(f"‚úÖ PyTorch imported successfully (version: {torch.__version__})")
        
        import torchaudio
        print("‚úÖ TorchAudio imported successfully")
        
        import spacy
        print("‚úÖ spaCy imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå AI library import error: {e}")
        return False

def test_web_frameworks():
    """Test web framework libraries"""
    print("\nüåê Testing web framework libraries...")
    
    try:
        from flask import Flask
        print("‚úÖ Flask imported successfully")
        
        from fastapi import FastAPI
        print("‚úÖ FastAPI imported successfully")
        
        import uvicorn
        print("‚úÖ Uvicorn imported successfully")
        
        from flask_cors import CORS
        print("‚úÖ Flask-CORS imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Web framework import error: {e}")
        return False

def test_utilities():
    """Test utility libraries"""
    print("\nüõ†Ô∏è Testing utility libraries...")
    
    try:
        import requests
        print("‚úÖ Requests imported successfully")
        
        import httpx
        print("‚úÖ HTTPX imported successfully")
        
        import psutil
        print("‚úÖ psutil imported successfully")
        
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv imported successfully")
        
        from pydantic import BaseModel
        print("‚úÖ Pydantic imported successfully")
        
        from tqdm import tqdm
        print("‚úÖ tqdm imported successfully")
        
        from tenacity import retry
        print("‚úÖ Tenacity imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Utility library import error: {e}")
        return False

def test_task_management():
    """Test task management libraries"""
    print("\n‚ö° Testing task management libraries...")
    
    try:
        from celery import Celery
        print("‚úÖ Celery imported successfully")
        
        import redis
        print("‚úÖ Redis imported successfully")
        
        return True
    except ImportError as e:
        print(f"‚ùå Task management import error: {e}")
        return False

def create_sample_data():
    """Create sample data for practice"""
    print("\nüìÅ Creating sample data directory...")
    
    # Create directories
    sample_dir = Path("sample_data")
    sample_dir.mkdir(exist_ok=True)
    
    (sample_dir / "audio").mkdir(exist_ok=True)
    (sample_dir / "video").mkdir(exist_ok=True)
    (sample_dir / "images").mkdir(exist_ok=True)
    (sample_dir / "output").mkdir(exist_ok=True)
    
    print("‚úÖ Sample data directories created")
    return sample_dir

def create_practice_scripts():
    """Create practice scripts for different libraries"""
    print("\nüìù Creating practice scripts...")
    
    scripts = {
        "01_audio_practice.py": """
# Audio Processing Practice
import librosa
import soundfile as sf
import numpy as np
import matplotlib.pyplot as plt

def practice_audio_analysis():
    \"\"\"Practice audio analysis with librosa\"\"\"
    print("üéµ Audio Processing Practice")
    
    # Create a simple sine wave as example
    sample_rate = 22050
    duration = 5  # seconds
    frequency = 440  # Hz (A note)
    
    t = np.linspace(0, duration, int(sample_rate * duration))
    audio = np.sin(2 * np.pi * frequency * t)
    
    # Save audio file
    sf.write('sample_data/audio/sine_wave.wav', audio, sample_rate)
    print("‚úÖ Created sample audio file: sine_wave.wav")
    
    # Load and analyze with librosa
    y, sr = librosa.load('sample_data/audio/sine_wave.wav')
    
    # Extract features
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr)[0]
    
    print(f"‚úÖ Extracted {mfcc.shape[1]} MFCC frames")
    print(f"‚úÖ Extracted {len(spectral_centroids)} spectral centroid frames")
    
    return y, sr, mfcc, spectral_centroids

if __name__ == "__main__":
    practice_audio_analysis()
""",
        
        "02_video_practice.py": """
# Video Processing Practice
import numpy as np
from PIL import Image
import moviepy.editor as mp

def practice_video_creation():
    \"\"\"Practice video creation with MoviePy\"\"\"
    print("üé¨ Video Processing Practice")
    
    # Create a simple colored frame
    width, height = 640, 480
    frame = np.zeros((height, width, 3), dtype=np.uint8)
    frame[:, :, 0] = 255  # Red channel
    
    # Save as image
    img = Image.fromarray(frame)
    img.save('sample_data/images/red_frame.png')
    print("‚úÖ Created sample image: red_frame.png")
    
    # Create a simple video clip
    def make_frame(t):
        # Create a frame that changes color over time
        frame = np.zeros((height, width, 3), dtype=np.uint8)
        intensity = int(255 * (t % 2) / 2)  # Oscillate between 0 and 255
        frame[:, :, 0] = intensity  # Red channel
        return frame
    
    clip = mp.VideoClip(make_frame, duration=3)
    clip.write_videofile('sample_data/video/color_animation.mp4', fps=24)
    print("‚úÖ Created sample video: color_animation.mp4")
    
    return clip

if __name__ == "__main__":
    practice_video_creation()
""",
        
        "03_ai_practice.py": """
# AI and ML Practice
import torch
import torchaudio
import numpy as np

def practice_pytorch():
    \"\"\"Practice PyTorch operations\"\"\"
    print("ü§ñ AI/ML Practice")
    
    # Create a simple tensor
    x = torch.randn(3, 4)
    y = torch.randn(4, 3)
    
    # Matrix multiplication
    z = torch.mm(x, y)
    
    print(f"‚úÖ Created tensor x: {x.shape}")
    print(f"‚úÖ Created tensor y: {y.shape}")
    print(f"‚úÖ Matrix multiplication result: {z.shape}")
    
    # Check if CUDA is available
    if torch.cuda.is_available():
        print("‚úÖ CUDA is available for GPU acceleration")
    else:
        print("‚ÑπÔ∏è CUDA not available, using CPU")
    
    return x, y, z

def practice_torchaudio():
    \"\"\"Practice TorchAudio operations\"\"\"
    print("üéµ TorchAudio Practice")
    
    # Create a simple audio tensor
    sample_rate = 22050
    duration = 2
    frequency = 440
    
    t = torch.linspace(0, duration, int(sample_rate * duration))
    audio = torch.sin(2 * torch.pi * frequency * t)
    
    # Add some noise
    noise = torch.randn_like(audio) * 0.1
    audio_with_noise = audio + noise
    
    print(f"‚úÖ Created audio tensor: {audio_with_noise.shape}")
    print(f"‚úÖ Sample rate: {sample_rate} Hz")
    
    return audio_with_noise, sample_rate

if __name__ == "__main__":
    practice_pytorch()
    practice_torchaudio()
""",
        
        "04_web_practice.py": """
# Web Framework Practice
from flask import Flask, jsonify
from fastapi import FastAPI
import uvicorn

def practice_flask():
    \"\"\"Practice Flask web framework\"\"\"
    print("üåê Flask Practice")
    
    app = Flask(__name__)
    
    @app.route('/')
    def hello():
        return jsonify({"message": "Hello from Flask!", "status": "success"})
    
    @app.route('/health')
    def health():
        return jsonify({"status": "healthy", "framework": "Flask"})
    
    print("‚úÖ Flask app created with routes:")
    print("   - GET / (hello)")
    print("   - GET /health (health check)")
    
    return app

def practice_fastapi():
    \"\"\"Practice FastAPI web framework\"\"\"
    print("üöÄ FastAPI Practice")
    
    app = FastAPI(title="Viral Clip API", version="1.0.0")
    
    @app.get("/")
    async def root():
        return {"message": "Hello from FastAPI!", "status": "success"}
    
    @app.get("/health")
    async def health():
        return {"status": "healthy", "framework": "FastAPI"}
    
    print("‚úÖ FastAPI app created with routes:")
    print("   - GET / (root)")
    print("   - GET /health (health check)")
    
    return app

if __name__ == "__main__":
    flask_app = practice_flask()
    fastapi_app = practice_fastapi()
    
    print("\\nTo run Flask app:")
    print("flask_app.run(debug=True, port=5000)")
    
    print("\\nTo run FastAPI app:")
    print("uvicorn.run(fastapi_app, host='0.0.0.0', port=8000)")
""",
        
        "05_utilities_practice.py": """
# Utilities Practice
import requests
import httpx
import psutil
import os
from dotenv import load_dotenv
from pydantic import BaseModel
from tqdm import tqdm
import time

def practice_requests():
    \"\"\"Practice HTTP requests\"\"\"
    print("üåç HTTP Requests Practice")
    
    # Test with a public API
    try:
        response = requests.get('https://jsonplaceholder.typicode.com/posts/1')
        data = response.json()
        print(f"‚úÖ HTTP request successful: {response.status_code}")
        print(f"‚úÖ Response data: {data['title'][:50]}...")
    except Exception as e:
        print(f"‚ùå HTTP request failed: {e}")
    
    return response

def practice_psutil():
    \"\"\"Practice system monitoring\"\"\"
    print("üíª System Monitoring Practice")
    
    # CPU usage
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"‚úÖ CPU Usage: {cpu_percent}%")
    
    # Memory usage
    memory = psutil.virtual_memory()
    print(f"‚úÖ Memory Usage: {memory.percent}%")
    print(f"‚úÖ Available Memory: {memory.available / (1024**3):.2f} GB")
    
    # Disk usage
    disk = psutil.disk_usage('/')
    print(f"‚úÖ Disk Usage: {disk.percent}%")
    
    return cpu_percent, memory, disk

def practice_pydantic():
    \"\"\"Practice data validation with Pydantic\"\"\"
    print("üìä Data Validation Practice")
    
    class VideoClip(BaseModel):
        title: str
        duration: float
        format: str
        viral_score: float = 0.0
    
    # Valid data
    clip_data = {
        "title": "Amazing Viral Clip",
        "duration": 15.5,
        "format": "mp4",
        "viral_score": 8.7
    }
    
    try:
        clip = VideoClip(**clip_data)
        print(f"‚úÖ Valid clip created: {clip.title}")
        print(f"‚úÖ Duration: {clip.duration}s, Score: {clip.viral_score}")
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
    
    return clip

def practice_tqdm():
    \"\"\"Practice progress bars\"\"\"
    print("üìà Progress Bar Practice")
    
    for i in tqdm(range(10), desc="Processing clips"):
        time.sleep(0.1)  # Simulate work
    
    print("‚úÖ Progress bar demonstration completed")

if __name__ == "__main__":
    practice_requests()
    practice_psutil()
    practice_pydantic()
    practice_tqdm()
"""
    }
    
    for filename, content in scripts.items():
        with open(filename, 'w') as f:
            f.write(content.strip())
        print(f"‚úÖ Created {filename}")
    
    return scripts

def main():
    """Main function to run all tests"""
    print("üöÄ Viral Clip Generation - Practice Environment Setup")
    print("=" * 60)
    
    # Test all library imports
    tests = [
        test_basic_imports,
        test_audio_libraries,
        test_video_libraries,
        test_ai_libraries,
        test_web_frameworks,
        test_utilities,
        test_task_management
    ]
    
    all_passed = True
    for test in tests:
        if not test():
            all_passed = False
    
    # Create sample data directory
    sample_dir = create_sample_data()
    
    # Create practice scripts
    scripts = create_practice_scripts()
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ All libraries imported successfully!")
        print("‚úÖ Your environment is ready for viral clip generation practice!")
    else:
        print("‚ö†Ô∏è Some libraries failed to import. Check the errors above.")
    
    print("\nüìö Practice Scripts Created:")
    for script_name in scripts.keys():
        print(f"   - {script_name}")
    
    print("\nüéØ Next Steps:")
    print("1. Run individual practice scripts to learn each library")
    print("2. Start with: python 01_audio_practice.py")
    print("3. Explore the sample_data directory for your projects")
    print("4. Check the README.md for detailed usage examples")
    
    print(f"\nüìÅ Your workspace: {os.getcwd()}")
    print(f"üìÅ Sample data: {sample_dir.absolute()}")

if __name__ == "__main__":
    main()
